import org.scalatest.funsuite.AnyFunSuite
import spinal.core.sim._
import spinal.core.{Component, SpinalProgress}

class AESSboxTest extends AnyFunSuite {
  test ("Testing AES CanrightSbox") {
    HADES("HADES")(CanrightSbox(pipelined = false))(sboxSim).apply()
  }

  test ("Testing AES CanrightInvSbox") {
    HADES("HADES")(CanrightSbox(pipelined = false))(inverseSboxSim).apply()
  }

  test ("Testing pipelined AES CanrightSbox") {
    HADES("HADES")(CanrightSbox(pipelined = true))(pipelinedSboxSim).apply()
  }

  test ("Testing pipelined AES CanrightInvSbox") {
    HADES("HADES")(CanrightSbox(pipelined = true))(pipelinedInverseSboxSim).apply()
  }

  test ("Testing AES BoyarPeraltaSbox") {
    HADES("HADES")(BoyarPeraltaSbox(pipelined = false))(sboxSim).apply()
  }

  test ("Testing AES BoyarPeraltaInvSbox") {
    HADES("HADES")(BoyarPeraltaSbox(pipelined = false))(inverseSboxSim).apply()
  }

  test ("Testing pipelined AES BoyarPeraltaSbox") {
    HADES("HADES")(BoyarPeraltaSbox(pipelined = true))(pipelinedSboxSim).apply()
  }

  test ("Testing pipelined AES BoyarPeraltaInvSbox") {
    HADES("HADES")(BoyarPeraltaSbox(pipelined = true))(pipelinedInverseSboxSim).apply()
  }

  def sboxSim(dut : Component): Unit = {
    val top = dut.asInstanceOf[AESSbox]
    top.cd.forkStimulus(10)

    top.io.isInverseSbox #= false

    val expectedResults = Array(
      0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
      0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
      0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
      0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
      0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
      0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
      0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
      0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
      0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
      0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
      0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
      0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
      0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
      0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
      0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
      0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    )

    for (i <- 0 until 255) {
      // Set inputs
      top.io.sboxIn #= i

      // Wait for execution
      top.cd.waitSampling(top.latency + 1)

      // Check outputs
      assert(top.io.sboxOut.toInt == expectedResults(i), s"Sbox output for input ${i.toHexString} is incorrect.")
    }

    SpinalProgress(s"Tests passed")
  }

  def pipelinedSboxSim(dut : Component): Unit = {
    val top = dut.asInstanceOf[AESSbox]
    top.cd.forkStimulus(10)

    top.io.isInverseSbox #= false

    val expectedResults = Array(
      0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
      0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
      0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
      0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
      0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
      0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
      0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
      0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
      0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
      0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
      0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
      0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
      0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
      0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
      0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
      0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    )

    for (i <- 0 until top.latency+1) {
      // Set inputs
      top.io.sboxIn #= i
      top.cd.waitSampling(1)
    }

    for (i <- 0 until 255) {
      // Check outputs
      assert(top.io.sboxOut.toInt == expectedResults(i), f"Sbox(${i.toHexString}) returned an incorrect result.")

      // Set inputs
      if (i + top.latency < 256) {
        top.io.sboxIn #= i + top.latency + 1
      }
      top.cd.waitSampling(1)
    }

    SpinalProgress(s"Tests passed")
  }

  def inverseSboxSim(dut : Component): Unit = {
    val top = dut.asInstanceOf[AESSbox]
    top.cd.forkStimulus(10)

    top.io.isInverseSbox #= true

    val expectedResults = Array(
      0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
      0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
      0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
      0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
      0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
      0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
      0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
      0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
      0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
      0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
      0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
      0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
      0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
      0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
      0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
      0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
    )

    for (i <- 0 until 255) {
      // Set inputs
      top.io.sboxIn #= i

      // Wait for execution
      top.cd.waitSampling(top.latency + 1)

      // Check outputs
      assert(top.io.sboxOut.toInt == expectedResults(i))
    }

    SpinalProgress(s"Tests passed")
  }

  def pipelinedInverseSboxSim(dut : Component): Unit = {
    val top = dut.asInstanceOf[AESSbox]
    top.cd.forkStimulus(10)

    top.io.isInverseSbox #= true

    val expectedResults = Array(
      0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
      0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
      0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
      0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
      0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
      0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
      0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
      0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
      0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
      0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
      0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
      0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
      0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
      0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
      0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
      0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
    )

    for (i <- 0 until top.latency + 1) {
      // Set inputs
      top.io.sboxIn #= i
      top.cd.waitSampling(1)
    }

    for (i <- 0 until 255) {
      // Check outputs
      assert(top.io.sboxOut.toInt == expectedResults(i), f"Sbox(${i.toHexString}) returned an incorrect result.")

      // Set inputs
      if (i + top.latency + 1 < 256) {
        top.io.sboxIn #= i + top.latency + 1
      }
      top.cd.waitSampling(1)
    }

    SpinalProgress(s"Tests passed")
  }
}

class AESTest extends AnyFunSuite {

  test("Testing AES-128 Encryption") {
    HADES("HADES")(AES(keySize = 128, mode = "encryption-only"))(encryption128Sim).apply()
  }

  test("Testing AES-192 Encryption") {
    HADES("HADES")(AES(keySize = 192, mode = "encryption-only"))(encryption192Sim).apply()
  }

  test("Testing AES-256 Encryption") {
    HADES("HADES")(AES(keySize = 256, mode = "encryption-only"))(encryption256Sim).apply()
  }

  test("Testing multiple AES-128 Encryptions") {
    HADES("HADES")(AES(keySize = 128, mode = "encryption-only"))(multEncryption128Sim).apply()
  }

  test("Testing fully-unrolled fully-pipelined AES-128 Encryption") {
    HADES("HADES")(AES(keySize = 128, mode = "encryption-only"))(unrolledEncryption128Sim).apply()
  }

  test("Testing fully-unrolled fully-pipelined AES-192 Encryption") {
    HADES("HADES")(AES(keySize = 192, mode = "encryption-only"))(unrolledEncryption192Sim).apply()
  }

  test("Testing fully-unrolled fully-pipelined AES-256 Encryption") {
    HADES("HADES")(AES(keySize = 256, mode = "encryption-only"))(unrolledEncryption256Sim).apply()
  }

  def encryption128Sim(dut: Component): Unit = {
    val top = dut.asInstanceOf[AES]
    top.cd.forkStimulus(10)

    val key = BigInt("2b7e151628aed2a6abf7158809cf4f3c", 16)
    val input = BigInt("3243f6a8885a308d313198a2e0370734", 16)
    val expectedResult = BigInt("3925841d02dc09fbdc118597196a0b32", 16)

    top.io.key #= key
    top.io.dataIn #= input

    // Start cipher execution
    top.fsm.enable #= false
    top.cd.waitSampling(1)
    top.fsm.enable #= true
    top.cd.waitSampling(1)
    top.fsm.enable #= false
    // Wait for execution to finish
    top.cd.waitSampling(top.latency)

    // Check results
    assert(top.fsm.valid.toBoolean)
    assert(top.io.dataOut.toBigInt == expectedResult)

    SpinalProgress(s"Tests passed")
  }

  def encryption192Sim(dut: Component): Unit = {
    val top = dut.asInstanceOf[AES]
    top.cd.forkStimulus(10)

    val key = BigInt("8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B", 16)
    val input = BigInt("6BC1BEE22E409F96E93D7E117393172A", 16)
    val expectedResult = BigInt("BD334F1D6E45F25FF712A214571FA5CC", 16)

    top.io.key #= key
    top.io.dataIn #= input

    // Start cipher execution
    top.fsm.enable #= false
    top.cd.waitSampling(1)
    top.fsm.enable #= true
    top.cd.waitSampling(1)
    top.fsm.enable #= false
    // Wait for execution to finish
    top.cd.waitSampling(top.latency)

    // Check results
    assert(top.fsm.valid.toBoolean)
    assert(top.io.dataOut.toBigInt == expectedResult)

    SpinalProgress(s"Tests passed")
  }

  def encryption256Sim(dut: Component): Unit = {
    val top = dut.asInstanceOf[AES]
    top.cd.forkStimulus(10)

    val key = BigInt("603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4", 16)
    val input = BigInt("6BC1BEE22E409F96E93D7E117393172A", 16)
    val expectedResult = BigInt("F3EED1BDB5D2A03C064B5A7E3DB181F8", 16)

    top.io.key #= key
    top.io.dataIn #= input

    // Start cipher execution
    top.fsm.enable #= false
    top.cd.waitSampling(1)
    top.fsm.enable #= true
    top.cd.waitSampling(1)
    top.fsm.enable #= false
    // Wait for execution to finish
    top.cd.waitSampling(top.latency)

    // Check results
    assert(top.fsm.valid.toBoolean)
    assert(top.io.dataOut.toBigInt == expectedResult)

    SpinalProgress(s"Tests passed")
  }

  def multEncryption128Sim(dut: Component): Unit = {
    val top = dut.asInstanceOf[AES]
    top.cd.forkStimulus(10)

    val keys = Array(
      BigInt("2b7e151628aed2a6abf7158809cf4f3c", 16),
      BigInt("2b7e151628aed2a6abf7158809cf4f3c", 16),
      BigInt("43a6eeb88e9dab1f86751dd180fdfd57", 16)
    )
    val inputs = Array(
      BigInt("3243f6a8885a308d313198a2e0370734", 16),
      BigInt("b007332ec232971cbfded61dd3cae9bd", 16),
      BigInt("0ba536018e5a9a8a823ad09e13dc8e8f", 16)
    )
    val expectedResults = Array(
      BigInt("3925841d02dc09fbdc118597196a0b32", 16),
      BigInt("b819a2a9d8a1bfe0fc3d7a557d77cf0c", 16),
      BigInt("b75254d5439a05a59a704bfccaec71a7", 16)
    )

    for (i <- keys.indices) {
      top.io.key #= keys(i)
      top.io.dataIn #= inputs(i)

      // Start cipher execution
      top.fsm.enable #= false
      top.cd.waitSampling(1)
      top.fsm.enable #= true
      top.cd.waitSampling(1)
      top.fsm.enable #= false
      // Wait for execution to finish
      top.cd.waitSampling(top.latency)

      // Check results
      assert(top.fsm.valid.toBoolean)
      assert(top.io.dataOut.toBigInt == expectedResults(i))

      // Wait 10 clock cycles before starting the next encryption
      top.cd.waitSampling(10)
    }

    SpinalProgress(s"Tests passed")
  }

  def unrolledEncryption128Sim(dut: Component): Unit = {
    val top = dut.asInstanceOf[AES]
    if (top.architecture != "fully-unrolled") {
      SpinalProgress(s"Tests are not applicable to this configuration")
      return
    }
    top.cd.forkStimulus(10)

    val key = BigInt("2b7e151628aed2a6abf7158809cf4f3c", 16)
    val input = BigInt("3243f6a8885a308d313198a2e0370734", 16)
    val expectedResult = BigInt("3925841d02dc09fbdc118597196a0b32", 16)

    // Pulse data for one cycle
    top.io.key #= 0
    top.io.dataIn #= 0
    top.cd.waitSampling(1)
    top.io.key #= key
    top.io.dataIn #= input
    top.cd.waitSampling(1)
    top.io.key #= 0
    top.io.dataIn #= 0
    // Wait for encryption to finish
    top.cd.waitSampling(top.latency - 1)

    // Check results
    assert(top.fsm.valid.toBoolean)
    assert(top.io.dataOut.toBigInt == expectedResult)

    SpinalProgress(s"Tests passed")
  }

  def unrolledEncryption192Sim(dut: Component): Unit = {
    val top = dut.asInstanceOf[AES]
    if (top.architecture != "fully-unrolled") {
      SpinalProgress(s"Tests are not applicable to this configuration")
      return
    }
    top.cd.forkStimulus(10)

    val key = BigInt("8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B", 16)
    val input = BigInt("6BC1BEE22E409F96E93D7E117393172A", 16)
    val expectedResult = BigInt("BD334F1D6E45F25FF712A214571FA5CC", 16)

    // Pulse data for one cycle
    top.io.key #= 0
    top.io.dataIn #= 0
    top.cd.waitSampling(1)
    top.io.key #= key
    top.io.dataIn #= input
    top.cd.waitSampling(1)
    top.io.key #= 0
    top.io.dataIn #= 0
    // Wait for encryption to finish
    top.cd.waitSampling(top.latency - 1)

    // Check results
    assert(top.fsm.valid.toBoolean)
    assert(top.io.dataOut.toBigInt == expectedResult)

    SpinalProgress(s"Tests passed")
  }

  def unrolledEncryption256Sim(dut: Component): Unit = {
    val top = dut.asInstanceOf[AES]
    if (top.architecture != "fully-unrolled") {
      SpinalProgress(s"Tests are not applicable to this configuration")
      return
    }
    top.cd.forkStimulus(10)

    val key = BigInt("603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4", 16)
    val input = BigInt("6BC1BEE22E409F96E93D7E117393172A", 16)
    val expectedResult = BigInt("F3EED1BDB5D2A03C064B5A7E3DB181F8", 16)

    // Pulse data for one cycle
    top.io.key #= 0
    top.io.dataIn #= 0
    top.cd.waitSampling(1)
    top.io.key #= key
    top.io.dataIn #= input
    top.cd.waitSampling(1)
    top.io.key #= 0
    top.io.dataIn #= 0
    // Wait for encryption to finish
    top.cd.waitSampling(top.latency - 1)

    // Check results
    assert(top.fsm.valid.toBoolean)
    assert(top.io.dataOut.toBigInt == expectedResult)

    SpinalProgress(s"Tests passed")
  }
}